/*
 * Copyright (c) 2018 Victor Rendina
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.victorrendina.dagger2.lifecycle.processor

import com.squareup.javapoet.AnnotationSpec
import com.squareup.javapoet.ArrayTypeName
import com.squareup.javapoet.ClassName
import com.squareup.javapoet.FieldSpec
import com.squareup.javapoet.JavaFile
import com.squareup.javapoet.MethodSpec
import com.squareup.javapoet.ParameterizedTypeName
import com.squareup.javapoet.TypeSpec
import com.victorrendina.dagger2.lifecycle.DaggerLifecycleDependencyProvider
import javax.lang.model.element.Modifier.FINAL
import javax.lang.model.element.Modifier.PRIVATE
import javax.lang.model.element.Modifier.PUBLIC

class LifecycleComponent(
    private val component: ClassName,
    private val dependencies: List<LifecycleDependency>
) {

    fun brewJava(): JavaFile {
        val typeSpec = TypeSpec.classBuilder(component.lifecycleFileName())
                .addModifiers(PUBLIC, FINAL)
                .addSuperinterface(ClassName.get(DaggerLifecycleDependencyProvider::class.java))
                .addField(AUTO_START_FIELD)
                .addField(AUTO_DISPOSE_FIELD)
                .addMethod(brewConstructor())
                .addMethod(MethodSpec.methodBuilder("getAutoStart")
                        .addModifiers(PUBLIC)
                        .addAnnotation(SUPPRESS_UNCHECKED)
                        .addAnnotation(Override::class.java)
                        .returns(PROVIDER_ARRAY)
                        .addStatement("return ${AUTO_START_FIELD.name}")
                        .build())
                .addMethod(MethodSpec.methodBuilder("getAutoDispose")
                        .addModifiers(PUBLIC)
                        .addAnnotation(SUPPRESS_UNCHECKED)
                        .addAnnotation(Override::class.java)
                        .returns(PROVIDER_ARRAY)
                        .addStatement("return ${AUTO_DISPOSE_FIELD.name}")
                        .build())
                .build()

        return JavaFile.builder(component.packageName(), typeSpec)
                .addFileComment("Generated by DaggerLifecycle. Do not modify!")
                .build()
    }

    private fun brewConstructor(): MethodSpec {
        val autoStart = dependencies.asSequence().filter { it.autoStart }
                .map { ClassName.get(it.element).simpleName().decapitalize() }.joinToString(",\n")

        val autoDispose = dependencies.asSequence().filter { it.autoDispose }
                .map { ClassName.get(it.element).simpleName().decapitalize() }.joinToString(",\n")

        val constructor = MethodSpec.constructorBuilder()
                .addModifiers(PUBLIC)
                .addAnnotation(JAVAX_INJECT)
                .addStatement("${AUTO_START_FIELD.name} = new \$T{\n\$L\n}", PROVIDER_ARRAY, autoStart)
                .addStatement("${AUTO_DISPOSE_FIELD.name} = new \$T{\n\$L\n}", PROVIDER_ARRAY, autoDispose)

        dependencies.forEach {
            val className = ClassName.get(it.element)
            val parameterizedTypeName = ParameterizedTypeName.get(JAVAX_PROVIDER, className)
            constructor.addParameter(parameterizedTypeName, className.simpleName().decapitalize())
        }

        return constructor.build()
    }

    companion object {
        private val PROVIDER_ARRAY = ArrayTypeName.of(JAVAX_PROVIDER) // Provider[]

        private val AUTO_START_FIELD = FieldSpec
                .builder(PROVIDER_ARRAY, "autoStart", PRIVATE, FINAL)
                .build() // private final Provider[] autoStart;

        private val AUTO_DISPOSE_FIELD = FieldSpec
                .builder(PROVIDER_ARRAY, "autoDispose", PRIVATE, FINAL)
                .build() // private final Provider[] autoDispose;

        private val SUPPRESS_UNCHECKED = AnnotationSpec.builder(SuppressWarnings::class.java)
                .addMember("value", "\"unchecked\"")
                .build()
    }
}